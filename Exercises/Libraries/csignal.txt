The <csignal> library in C++ provides functions for handling signals, which are asynchronous events that can interrupt the normal flow of a program. Signals 
can be generated by the system (e.g., division by zero, invalid memory access) or by other processes, and they are often used to handle errors or external 
events like interrupts (e.g., pressing Ctrl+C to stop a program).

•   signal(int sig, sighandler_t handler): Sets a function to handle a specific signal, defining custom behavior when a signal is received.

•   raise(int sig): Sends a signal to the current process, which can be used to trigger a signal handler.

•   kill(pid_t pid, int sig): Sends a signal to a specific process (identified by pid).

•   sigaction(int sig, const struct sigaction* act, struct sigaction* oldact): Provides a more robust way to manage signals compared to signal(), allowing 
    more fine-tuned control over signal handling.

•   sigprocmask(int how, const sigset_t* set, sigset_t* oldset): Used to block or unblock signals, or check which signals are blocked.

•   sigpending(sigset_t* set): Checks for pending signals (signals that have been sent but are currently blocked).

•   sigemptyset(sigset_t* set): Initializes a signal set to exclude all signals.

•   sigfillset(sigset_t* set): Initializes a signal set to include all signals.

•   sigaddset(sigset_t* set, int sig): Adds a signal to the signal set.

•   sigdelset(sigset_t* set, int sig): Removes a signal from the signal set.

•   pause(): Suspends the program until a signal is received.

•   sigsuspend(const sigset_t* mask): Temporarily replaces the signal mask and suspends the process until a signal is received.

•   abort(): Sends the SIGABRT signal to the current process, usually to terminate the program abnormally.

•   alarm(unsigned int seconds): Sets a timer to send a SIGALRM signal after the specified number of seconds.

•   sleep(unsigned int seconds): Suspends the program for the specified number of seconds before resuming execution.

•   psignal(int sig, const char* message): Prints a message describing the signal to standard error.

•   sigwait(const sigset_t* set, int* sig): Waits for a signal from the signal set to be delivered.

•   SIG_DFL: Default signal handler action (usually terminates the process).

•   SIG_IGN: Ignores the signal when it's received.

•   SIG_ERR: Returned when signal() fails to install a signal handler.

•   SIGABRT: Signal sent by the abort() function.

•   SIGFPE: Sent on an arithmetic error, such as division by zero or overflow.

•   SIGILL: Sent when an illegal instruction is encountered.

•   SIGINT: Sent to interrupt a program (usually sent by pressing Ctrl+C).

•   SIGSEGV: Sent when a segmentation fault occurs (invalid memory access).

•   SIGTERM: Request to terminate the program.

•   SIGALRM: Sent when a timer set by alarm() expires.

•   SIGKILL: Sent to forcibly kill a process (cannot be caught or ignored).